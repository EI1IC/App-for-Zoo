// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RazorPagesZoo.Models;

#nullable disable

namespace RazorPagesZoo.Migrations
{
    [DbContext(typeof(ZoodbContext))]
    [Migration("20250119200717_vacc1")]
    partial class vacc1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Animal", b =>
                {
                    b.Property<int>("IdAnimal")
                        .HasColumnType("integer")
                        .HasColumnName("id_animal");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("features");

                    b.Property<int?>("IdCage")
                        .HasColumnType("integer")
                        .HasColumnName("id_cage");

                    b.Property<int>("IdSpecies")
                        .HasColumnType("integer")
                        .HasColumnName("id_species");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sex");

                    b.HasKey("IdAnimal")
                        .HasName("animal_pkey");

                    b.HasIndex("IdCage");

                    b.HasIndex("IdSpecies");

                    b.HasIndex(new[] { "Name" }, "animal_name_key")
                        .IsUnique();

                    b.ToTable("animal", "zoo_keepers");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Cage", b =>
                {
                    b.Property<int>("IdCage")
                        .HasColumnType("integer")
                        .HasColumnName("id_cage");

                    b.Property<int?>("AnimalIdAnimal")
                        .HasColumnType("integer");

                    b.Property<decimal>("CageSize")
                        .HasColumnType("numeric")
                        .HasColumnName("cage_size");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Temp")
                        .HasColumnType("numeric")
                        .HasColumnName("temp");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("IdCage")
                        .HasName("cage_pkey");

                    b.HasIndex("AnimalIdAnimal");

                    b.ToTable("cage", "zoo_keepers");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Employee", b =>
                {
                    b.Property<long>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_employee");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("IdEmployee"));

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<float>("WorkEfficiency")
                        .HasColumnType("real")
                        .HasColumnName("work_efficiency");

                    b.HasKey("IdEmployee")
                        .HasName("employee_pkey");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("employee", "zoo_keepers");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.JournalOfTask", b =>
                {
                    b.Property<long>("IdEmployee")
                        .HasColumnType("bigint")
                        .HasColumnName("id_employee");

                    b.Property<int>("IdTask")
                        .HasColumnType("integer")
                        .HasColumnName("id_task");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("IdentityUserID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("IdentityUserID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("IdEmployee", "IdTask")
                        .HasName("journalpk");

                    b.HasIndex("IdTask");

                    b.ToTable("journal_of_tasks", "zoo_keepers");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.SpeciesNote", b =>
                {
                    b.Property<int>("IdSpecies")
                        .HasColumnType("integer")
                        .HasColumnName("id_species");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("SpeciesGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("species_group");

                    b.HasKey("IdSpecies")
                        .HasName("species_note_pkey");

                    b.HasIndex(new[] { "Name" }, "species_note_name_key")
                        .IsUnique();

                    b.ToTable("species_note", "zoo_keepers");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Task", b =>
                {
                    b.Property<int>("IdTask")
                        .HasColumnType("integer")
                        .HasColumnName("id_task");

                    b.Property<DateOnly>("DateDrop")
                        .HasColumnType("date")
                        .HasColumnName("date_drop");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IdAnimal")
                        .HasColumnType("integer")
                        .HasColumnName("id_animal");

                    b.Property<int>("IdCage")
                        .HasColumnType("integer")
                        .HasColumnName("id_cage");

                    b.HasKey("IdTask")
                        .HasName("task_pkey");

                    b.HasIndex("IdAnimal");

                    b.HasIndex("IdCage");

                    b.ToTable("task", "zoo_keepers");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Vaccination", b =>
                {
                    b.Property<int>("IdVaccination")
                        .HasColumnType("integer")
                        .HasColumnName("id_vaccination");

                    b.Property<DateOnly>("DateLastVaccination")
                        .HasColumnType("date")
                        .HasColumnName("date_last_vaccination");

                    b.Property<DateOnly>("DateNextVaccination")
                        .HasColumnType("date")
                        .HasColumnName("date_next_vaccination");

                    b.Property<int>("IdAnimal")
                        .HasColumnType("integer")
                        .HasColumnName("id_animal");

                    b.Property<int>("IdBatchLastVaccination")
                        .HasColumnType("integer")
                        .HasColumnName("id_batch_last_vaccination");

                    b.Property<string>("NameVaccination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_vaccination");

                    b.HasKey("IdVaccination")
                        .HasName("vaccination_pkey");

                    b.HasIndex("IdAnimal");

                    b.ToTable("vaccination", "zoo_keepers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Animal", b =>
                {
                    b.HasOne("RazorPagesZoo.Models.Cage", "IdCageNavigation")
                        .WithMany("IdAnimals")
                        .HasForeignKey("IdCage")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_animal_cage");

                    b.HasOne("RazorPagesZoo.Models.SpeciesNote", "IdSpeciesNavigation")
                        .WithMany("Animals")
                        .HasForeignKey("IdSpecies")
                        .IsRequired()
                        .HasConstraintName("animal_speciesfk");

                    b.Navigation("IdCageNavigation");

                    b.Navigation("IdSpeciesNavigation");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Cage", b =>
                {
                    b.HasOne("RazorPagesZoo.Models.Animal", null)
                        .WithMany("IdCages")
                        .HasForeignKey("AnimalIdAnimal");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RazorPagesZoo.Models.JournalOfTask", b =>
                {
                    b.HasOne("RazorPagesZoo.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("JournalOfTasks")
                        .HasForeignKey("IdEmployee")
                        .IsRequired()
                        .HasConstraintName("journal_idemployeefk");

                    b.HasOne("RazorPagesZoo.Models.Task", "IdTaskNavigation")
                        .WithMany("JournalOfTasks")
                        .HasForeignKey("IdTask")
                        .IsRequired()
                        .HasConstraintName("journal_idtaskfk");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdTaskNavigation");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Task", b =>
                {
                    b.HasOne("RazorPagesZoo.Models.Animal", "IdAnimalNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdAnimal")
                        .IsRequired()
                        .HasConstraintName("task_idanimalfk");

                    b.HasOne("RazorPagesZoo.Models.Cage", "IdCageNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdCage")
                        .IsRequired()
                        .HasConstraintName("task_idcagefk");

                    b.Navigation("IdAnimalNavigation");

                    b.Navigation("IdCageNavigation");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Vaccination", b =>
                {
                    b.HasOne("RazorPagesZoo.Models.Animal", "IdAnimalNavigation")
                        .WithMany("Vaccinations")
                        .HasForeignKey("IdAnimal")
                        .IsRequired()
                        .HasConstraintName("vaccination_idanimalfk");

                    b.Navigation("IdAnimalNavigation");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Animal", b =>
                {
                    b.Navigation("IdCages");

                    b.Navigation("Tasks");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Cage", b =>
                {
                    b.Navigation("IdAnimals");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Employee", b =>
                {
                    b.Navigation("JournalOfTasks");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.SpeciesNote", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("RazorPagesZoo.Models.Task", b =>
                {
                    b.Navigation("JournalOfTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
